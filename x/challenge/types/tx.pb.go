// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/challenge/tx.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSubmit struct {
	// The challenger address.
	Challenger string `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
	// The storage provider to be challenged.
	SpOperatorAddress string `protobuf:"bytes,2,opt,name=sp_operator_address,json=spOperatorAddress,proto3" json:"sp_operator_address,omitempty"`
	// The bucket of the object info to be challenged.
	BucketName string `protobuf:"bytes,3,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The name of the object info to be challenged.
	ObjectName string `protobuf:"bytes,4,opt,name=object_name,json=objectName,proto3" json:"object_name,omitempty"`
	// The index of segment/piece to challenge, start from zero.
	SegmentIndex uint32 `protobuf:"varint,5,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// Randomly pick a segment/piece to challenge or not.
	RandomIndex bool `protobuf:"varint,6,opt,name=random_index,json=randomIndex,proto3" json:"random_index,omitempty"`
}

func (m *MsgSubmit) Reset()         { *m = MsgSubmit{} }
func (m *MsgSubmit) String() string { return proto.CompactTextString(m) }
func (*MsgSubmit) ProtoMessage()    {}
func (*MsgSubmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{0}
}
func (m *MsgSubmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmit.Merge(m, src)
}
func (m *MsgSubmit) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmit proto.InternalMessageInfo

func (m *MsgSubmit) GetChallenger() string {
	if m != nil {
		return m.Challenger
	}
	return ""
}

func (m *MsgSubmit) GetSpOperatorAddress() string {
	if m != nil {
		return m.SpOperatorAddress
	}
	return ""
}

func (m *MsgSubmit) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *MsgSubmit) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *MsgSubmit) GetSegmentIndex() uint32 {
	if m != nil {
		return m.SegmentIndex
	}
	return 0
}

func (m *MsgSubmit) GetRandomIndex() bool {
	if m != nil {
		return m.RandomIndex
	}
	return false
}

type MsgSubmitResponse struct {
}

func (m *MsgSubmitResponse) Reset()         { *m = MsgSubmitResponse{} }
func (m *MsgSubmitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitResponse) ProtoMessage()    {}
func (*MsgSubmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{1}
}
func (m *MsgSubmitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitResponse.Merge(m, src)
}
func (m *MsgSubmitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitResponse proto.InternalMessageInfo

type MsgAttest struct {
	// The submitter address.
	Submitter string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// The id of the challenge.
	ChallengeId uint64 `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The id of the object info.
	ObjectId Uint `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3,customtype=Uint" json:"object_id"`
	// The storage provider to be challenged.
	SpOperatorAddress string `protobuf:"bytes,4,opt,name=sp_operator_address,json=spOperatorAddress,proto3" json:"sp_operator_address,omitempty"`
	// Vote result of the attestation.
	VoteResult VoteResult `protobuf:"varint,5,opt,name=vote_result,json=voteResult,proto3,enum=bnbchain.greenfield.challenge.VoteResult" json:"vote_result,omitempty"`
	// The challenger who submits the challenge, which can be empty.
	ChallengerAddress string `protobuf:"bytes,6,opt,name=challenger_address,json=challengerAddress,proto3" json:"challenger_address,omitempty"`
	// The validators participated in the attestation.
	VoteValidatorSet []uint64 `protobuf:"fixed64,7,rep,packed,name=vote_validator_set,json=voteValidatorSet,proto3" json:"vote_validator_set,omitempty"`
	// The aggregated BLS signature from the validators.
	VoteAggSignature []byte `protobuf:"bytes,8,opt,name=vote_agg_signature,json=voteAggSignature,proto3" json:"vote_agg_signature,omitempty"`
}

func (m *MsgAttest) Reset()         { *m = MsgAttest{} }
func (m *MsgAttest) String() string { return proto.CompactTextString(m) }
func (*MsgAttest) ProtoMessage()    {}
func (*MsgAttest) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{2}
}
func (m *MsgAttest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttest.Merge(m, src)
}
func (m *MsgAttest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttest proto.InternalMessageInfo

func (m *MsgAttest) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *MsgAttest) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *MsgAttest) GetSpOperatorAddress() string {
	if m != nil {
		return m.SpOperatorAddress
	}
	return ""
}

func (m *MsgAttest) GetVoteResult() VoteResult {
	if m != nil {
		return m.VoteResult
	}
	return CHALLENGE_FAILED
}

func (m *MsgAttest) GetChallengerAddress() string {
	if m != nil {
		return m.ChallengerAddress
	}
	return ""
}

func (m *MsgAttest) GetVoteValidatorSet() []uint64 {
	if m != nil {
		return m.VoteValidatorSet
	}
	return nil
}

func (m *MsgAttest) GetVoteAggSignature() []byte {
	if m != nil {
		return m.VoteAggSignature
	}
	return nil
}

type MsgAttestResponse struct {
}

func (m *MsgAttestResponse) Reset()         { *m = MsgAttestResponse{} }
func (m *MsgAttestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAttestResponse) ProtoMessage()    {}
func (*MsgAttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{3}
}
func (m *MsgAttestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAttestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAttestResponse.Merge(m, src)
}
func (m *MsgAttestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAttestResponse proto.InternalMessageInfo

type MsgHeartbeat struct {
	// The submitter address.
	Submitter string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// The id of the challenge.
	ChallengeId uint64 `protobuf:"varint,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	// The validators participated in the attestation.
	VoteValidatorSet []uint64 `protobuf:"fixed64,3,rep,packed,name=vote_validator_set,json=voteValidatorSet,proto3" json:"vote_validator_set,omitempty"`
	// The aggregated BLS signature from the validators.
	VoteAggSignature []byte `protobuf:"bytes,4,opt,name=vote_agg_signature,json=voteAggSignature,proto3" json:"vote_agg_signature,omitempty"`
}

func (m *MsgHeartbeat) Reset()         { *m = MsgHeartbeat{} }
func (m *MsgHeartbeat) String() string { return proto.CompactTextString(m) }
func (*MsgHeartbeat) ProtoMessage()    {}
func (*MsgHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{4}
}
func (m *MsgHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHeartbeat.Merge(m, src)
}
func (m *MsgHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *MsgHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHeartbeat proto.InternalMessageInfo

func (m *MsgHeartbeat) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *MsgHeartbeat) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *MsgHeartbeat) GetVoteValidatorSet() []uint64 {
	if m != nil {
		return m.VoteValidatorSet
	}
	return nil
}

func (m *MsgHeartbeat) GetVoteAggSignature() []byte {
	if m != nil {
		return m.VoteAggSignature
	}
	return nil
}

type MsgHeartbeatResponse struct {
}

func (m *MsgHeartbeatResponse) Reset()         { *m = MsgHeartbeatResponse{} }
func (m *MsgHeartbeatResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHeartbeatResponse) ProtoMessage()    {}
func (*MsgHeartbeatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_516ed0ec90010e48, []int{5}
}
func (m *MsgHeartbeatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHeartbeatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHeartbeatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHeartbeatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHeartbeatResponse.Merge(m, src)
}
func (m *MsgHeartbeatResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHeartbeatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHeartbeatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHeartbeatResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmit)(nil), "bnbchain.greenfield.challenge.MsgSubmit")
	proto.RegisterType((*MsgSubmitResponse)(nil), "bnbchain.greenfield.challenge.MsgSubmitResponse")
	proto.RegisterType((*MsgAttest)(nil), "bnbchain.greenfield.challenge.MsgAttest")
	proto.RegisterType((*MsgAttestResponse)(nil), "bnbchain.greenfield.challenge.MsgAttestResponse")
	proto.RegisterType((*MsgHeartbeat)(nil), "bnbchain.greenfield.challenge.MsgHeartbeat")
	proto.RegisterType((*MsgHeartbeatResponse)(nil), "bnbchain.greenfield.challenge.MsgHeartbeatResponse")
}

func init() { proto.RegisterFile("greenfield/challenge/tx.proto", fileDescriptor_516ed0ec90010e48) }

var fileDescriptor_516ed0ec90010e48 = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0xbb, 0xb4, 0x56, 0x3a, 0x2d, 0x28, 0x03, 0xd1, 0xb5, 0x86, 0x52, 0xf1, 0x52, 0x7f,
	0x74, 0x57, 0x20, 0x31, 0x84, 0x1b, 0x9c, 0x40, 0x83, 0x26, 0xdb, 0xc8, 0xc1, 0xcb, 0x66, 0xb6,
	0xfb, 0x1c, 0x56, 0xbb, 0x33, 0xcd, 0xce, 0xb4, 0xc1, 0xab, 0x7f, 0x81, 0x7f, 0x87, 0x27, 0x0f,
	0x24, 0x5e, 0x3d, 0x72, 0x24, 0x24, 0x26, 0xc6, 0x03, 0x31, 0x70, 0xf0, 0xdf, 0x30, 0x3b, 0x33,
	0xdd, 0x56, 0xd3, 0xd8, 0x72, 0xf0, 0xd4, 0x9d, 0xf7, 0x3e, 0x6f, 0xbe, 0xf3, 0xde, 0xb7, 0x33,
	0x68, 0x99, 0x26, 0x00, 0xec, 0x4d, 0x04, 0x9d, 0xd0, 0x6d, 0x1f, 0x92, 0x4e, 0x07, 0x18, 0x05,
	0x57, 0x1e, 0x39, 0xdd, 0x84, 0x4b, 0x8e, 0x97, 0x03, 0x16, 0xb4, 0x0f, 0x49, 0xc4, 0x9c, 0x21,
	0xe7, 0x64, 0x5c, 0xf5, 0x76, 0x9b, 0x8b, 0x98, 0x0b, 0x37, 0x16, 0xd4, 0xed, 0xaf, 0xa5, 0x3f,
	0xba, 0xae, 0x7a, 0x47, 0x27, 0x7c, 0xb5, 0x72, 0xf5, 0xc2, 0xa4, 0x96, 0x28, 0xa7, 0x5c, 0xc7,
	0xd3, 0x2f, 0x13, 0xad, 0x8f, 0x3f, 0xc7, 0xfb, 0x2e, 0x98, 0xba, 0xd5, 0x4f, 0x33, 0xa8, 0xb4,
	0x2f, 0x68, 0xab, 0x17, 0xc4, 0x91, 0xc4, 0x9b, 0x08, 0x65, 0x58, 0x62, 0x5b, 0x75, 0xab, 0x51,
	0xda, 0xb1, 0xcf, 0x8e, 0x9b, 0x4b, 0x46, 0x6b, 0x3b, 0x0c, 0x13, 0x10, 0xa2, 0x25, 0x93, 0x88,
	0x51, 0x6f, 0x84, 0xc5, 0xbb, 0x68, 0x51, 0x74, 0x7d, 0xde, 0x85, 0x84, 0x48, 0x9e, 0xf8, 0x44,
	0x83, 0xf6, 0xcc, 0x84, 0x2d, 0x16, 0x44, 0xf7, 0xa5, 0xa9, 0x31, 0x09, 0xbc, 0x82, 0xca, 0x41,
	0xaf, 0xfd, 0x0e, 0xa4, 0xcf, 0x48, 0x0c, 0x76, 0x3e, 0xdd, 0xc1, 0x43, 0x3a, 0xf4, 0x82, 0xc4,
	0x90, 0x02, 0x3c, 0x78, 0x0b, 0x6d, 0x03, 0x14, 0x34, 0xa0, 0x43, 0x0a, 0xb8, 0x8f, 0xe6, 0x04,
	0xd0, 0x18, 0x98, 0xf4, 0x23, 0x16, 0xc2, 0x91, 0x7d, 0xad, 0x6e, 0x35, 0xe6, 0xbc, 0x8a, 0x09,
	0xee, 0xa5, 0x31, 0x7c, 0x0f, 0x55, 0x12, 0xc2, 0x42, 0x1e, 0x1b, 0xa6, 0x58, 0xb7, 0x1a, 0xb3,
	0x5e, 0x59, 0xc7, 0x14, 0xb2, 0x75, 0xe3, 0xc3, 0xaf, 0xcf, 0x0f, 0x47, 0x9a, 0x5c, 0x5d, 0x44,
	0x0b, 0xd9, 0xac, 0x3c, 0x10, 0x5d, 0xce, 0x04, 0xac, 0x7e, 0xc9, 0xab, 0x09, 0x6e, 0x4b, 0x09,
	0x42, 0xe2, 0xa7, 0xa8, 0x24, 0x54, 0x5e, 0x4e, 0x31, 0xc0, 0x21, 0x9a, 0x1e, 0x27, 0x13, 0xf2,
	0xa3, 0x50, 0x0d, 0xae, 0xe0, 0x95, 0xb3, 0xd8, 0x5e, 0x88, 0x37, 0x51, 0xc9, 0xf4, 0x1d, 0x85,
	0x7a, 0x2c, 0x3b, 0x77, 0x4f, 0xce, 0x57, 0x72, 0x3f, 0xce, 0x57, 0x0a, 0xaf, 0x22, 0x26, 0xcf,
	0x8e, 0x9b, 0x65, 0x23, 0x93, 0x2e, 0xbd, 0x59, 0x4d, 0xef, 0x85, 0xd8, 0x19, 0x6f, 0x8e, 0x9e,
	0xdc, 0x18, 0x0b, 0x9e, 0xa1, 0x72, 0x9f, 0x4b, 0xf0, 0x13, 0x10, 0xbd, 0x8e, 0x54, 0xe3, 0x9b,
	0x5f, 0x7f, 0xe0, 0xfc, 0xf3, 0x5f, 0xeb, 0x1c, 0x70, 0x09, 0x9e, 0x2a, 0xf0, 0x50, 0x3f, 0xfb,
	0xc6, 0x4d, 0x84, 0x87, 0x13, 0xcc, 0xa4, 0x8b, 0x5a, 0x7a, 0x98, 0x19, 0x48, 0x3f, 0x46, 0x58,
	0x49, 0xf7, 0x49, 0x27, 0x0a, 0xd5, 0x69, 0x05, 0x48, 0xfb, 0x7a, 0x3d, 0xdf, 0x28, 0x7a, 0x37,
	0xd3, 0xcc, 0xc1, 0x20, 0xd1, 0x02, 0x99, 0xd1, 0x84, 0x52, 0x5f, 0x44, 0x94, 0x11, 0xd9, 0x4b,
	0xc0, 0x9e, 0xad, 0x5b, 0x8d, 0x8a, 0xa6, 0xb7, 0x29, 0x6d, 0x0d, 0xe2, 0x5b, 0xf3, 0xa9, 0x9f,
	0xc3, 0x99, 0x1b, 0x3b, 0xb5, 0x71, 0x99, 0x9d, 0xdf, 0x2c, 0x54, 0xd9, 0x17, 0x74, 0x17, 0x48,
	0x22, 0x03, 0x20, 0xff, 0xd5, 0xd1, 0xf1, 0xcd, 0xe6, 0xaf, 0xd4, 0x6c, 0x61, 0xca, 0x66, 0x6f,
	0xa1, 0xa5, 0xd1, 0xb6, 0x06, 0xfd, 0xae, 0x7f, 0x9d, 0x41, 0xf9, 0x7d, 0x41, 0x71, 0x88, 0x8a,
	0xe6, 0x11, 0x68, 0x4c, 0x30, 0x3a, 0xbb, 0x02, 0xd5, 0x27, 0xd3, 0x92, 0x03, 0xb5, 0x54, 0xc5,
	0x5c, 0x94, 0x29, 0x54, 0x34, 0x39, 0x8d, 0xca, 0x9f, 0x1e, 0xe2, 0x18, 0x95, 0x86, 0xfe, 0x3d,
	0x9a, 0x5c, 0x9e, 0xc1, 0xd5, 0x8d, 0x2b, 0xc0, 0x03, 0xb9, 0x9d, 0xe7, 0x27, 0x17, 0x35, 0xeb,
	0xf4, 0xa2, 0x66, 0xfd, 0xbc, 0xa8, 0x59, 0x1f, 0x2f, 0x6b, 0xb9, 0xd3, 0xcb, 0x5a, 0xee, 0xfb,
	0x65, 0x2d, 0xf7, 0x7a, 0x8d, 0x46, 0xf2, 0xb0, 0x17, 0x38, 0x6d, 0x1e, 0xbb, 0x01, 0x0b, 0x9a,
	0x6a, 0x67, 0x77, 0xe4, 0x51, 0x3e, 0xfa, 0xfb, 0x59, 0x0e, 0x8a, 0xea, 0x5d, 0xde, 0xf8, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xf3, 0x0b, 0x7e, 0x43, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Submit(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error)
	Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error)
	Heartbeat(ctx context.Context, in *MsgHeartbeat, opts ...grpc.CallOption) (*MsgHeartbeatResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Submit(ctx context.Context, in *MsgSubmit, opts ...grpc.CallOption) (*MsgSubmitResponse, error) {
	out := new(MsgSubmitResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.challenge.Msg/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Attest(ctx context.Context, in *MsgAttest, opts ...grpc.CallOption) (*MsgAttestResponse, error) {
	out := new(MsgAttestResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.challenge.Msg/Attest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Heartbeat(ctx context.Context, in *MsgHeartbeat, opts ...grpc.CallOption) (*MsgHeartbeatResponse, error) {
	out := new(MsgHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/bnbchain.greenfield.challenge.Msg/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Submit(context.Context, *MsgSubmit) (*MsgSubmitResponse, error)
	Attest(context.Context, *MsgAttest) (*MsgAttestResponse, error)
	Heartbeat(context.Context, *MsgHeartbeat) (*MsgHeartbeatResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Submit(ctx context.Context, req *MsgSubmit) (*MsgSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (*UnimplementedMsgServer) Attest(ctx context.Context, req *MsgAttest) (*MsgAttestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attest not implemented")
}
func (*UnimplementedMsgServer) Heartbeat(ctx context.Context, req *MsgHeartbeat) (*MsgHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.challenge.Msg/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Submit(ctx, req.(*MsgSubmit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAttest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.challenge.Msg/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Attest(ctx, req.(*MsgAttest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bnbchain.greenfield.challenge.Msg/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Heartbeat(ctx, req.(*MsgHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bnbchain.greenfield.challenge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _Msg_Submit_Handler,
		},
		{
			MethodName: "Attest",
			Handler:    _Msg_Attest_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Msg_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenfield/challenge/tx.proto",
}

func (m *MsgSubmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomIndex {
		i--
		if m.RandomIndex {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SegmentIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SegmentIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ObjectName) > 0 {
		i -= len(m.ObjectName)
		copy(dAtA[i:], m.ObjectName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObjectName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpOperatorAddress) > 0 {
		i -= len(m.SpOperatorAddress)
		copy(dAtA[i:], m.SpOperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpOperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAttest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteAggSignature) > 0 {
		i -= len(m.VoteAggSignature)
		copy(dAtA[i:], m.VoteAggSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteAggSignature)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.VoteValidatorSet) > 0 {
		for iNdEx := len(m.VoteValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VoteValidatorSet[iNdEx]))
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteValidatorSet)*8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChallengerAddress) > 0 {
		i -= len(m.ChallengerAddress)
		copy(dAtA[i:], m.ChallengerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.VoteResult != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteResult))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SpOperatorAddress) > 0 {
		i -= len(m.SpOperatorAddress)
		copy(dAtA[i:], m.SpOperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SpOperatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.ObjectId.Size()
		i -= size
		if _, err := m.ObjectId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAttestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAttestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAttestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteAggSignature) > 0 {
		i -= len(m.VoteAggSignature)
		copy(dAtA[i:], m.VoteAggSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteAggSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoteValidatorSet) > 0 {
		for iNdEx := len(m.VoteValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VoteValidatorSet[iNdEx]))
		}
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoteValidatorSet)*8))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHeartbeatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SpOperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObjectName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SegmentIndex != 0 {
		n += 1 + sovTx(uint64(m.SegmentIndex))
	}
	if m.RandomIndex {
		n += 2
	}
	return n
}

func (m *MsgSubmitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAttest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	l = m.ObjectId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.SpOperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VoteResult != 0 {
		n += 1 + sovTx(uint64(m.VoteResult))
	}
	l = len(m.ChallengerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VoteValidatorSet) > 0 {
		n += 1 + sovTx(uint64(len(m.VoteValidatorSet)*8)) + len(m.VoteValidatorSet)*8
	}
	l = len(m.VoteAggSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAttestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	if len(m.VoteValidatorSet) > 0 {
		n += 1 + sovTx(uint64(len(m.VoteValidatorSet)*8)) + len(m.VoteValidatorSet)*8
	}
	l = len(m.VoteAggSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgHeartbeatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentIndex", wireType)
			}
			m.SegmentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomIndex", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RandomIndex = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteResult", wireType)
			}
			m.VoteResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteResult |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.VoteValidatorSet = append(m.VoteValidatorSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.VoteValidatorSet) == 0 {
					m.VoteValidatorSet = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.VoteValidatorSet = append(m.VoteValidatorSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteValidatorSet", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAggSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteAggSignature = append(m.VoteAggSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteAggSignature == nil {
				m.VoteAggSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAttestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAttestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAttestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.VoteValidatorSet = append(m.VoteValidatorSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.VoteValidatorSet) == 0 {
					m.VoteValidatorSet = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.VoteValidatorSet = append(m.VoteValidatorSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteValidatorSet", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAggSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteAggSignature = append(m.VoteAggSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteAggSignature == nil {
				m.VoteAggSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
