// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/challenge/recent_slash.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecentSlash struct {
	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SpOperatorAddress string `protobuf:"bytes,2,opt,name=sp_operator_address,json=spOperatorAddress,proto3" json:"sp_operator_address,omitempty"`
	ObjectId          uint64 `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Height            uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *RecentSlash) Reset()         { *m = RecentSlash{} }
func (m *RecentSlash) String() string { return proto.CompactTextString(m) }
func (*RecentSlash) ProtoMessage()    {}
func (*RecentSlash) Descriptor() ([]byte, []int) {
	return fileDescriptor_55cfbe4f4e477b2b, []int{0}
}
func (m *RecentSlash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecentSlash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecentSlash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecentSlash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecentSlash.Merge(m, src)
}
func (m *RecentSlash) XXX_Size() int {
	return m.Size()
}
func (m *RecentSlash) XXX_DiscardUnknown() {
	xxx_messageInfo_RecentSlash.DiscardUnknown(m)
}

var xxx_messageInfo_RecentSlash proto.InternalMessageInfo

func (m *RecentSlash) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecentSlash) GetSpOperatorAddress() string {
	if m != nil {
		return m.SpOperatorAddress
	}
	return ""
}

func (m *RecentSlash) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *RecentSlash) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*RecentSlash)(nil), "bnbchain.greenfield.challenge.RecentSlash")
}

func init() {
	proto.RegisterFile("greenfield/challenge/recent_slash.proto", fileDescriptor_55cfbe4f4e477b2b)
}

var fileDescriptor_55cfbe4f4e477b2b = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xbd, 0x4a, 0x04, 0x31,
	0x14, 0x46, 0x27, 0xe3, 0xb2, 0xb8, 0x11, 0x04, 0x23, 0xc8, 0x80, 0x18, 0x16, 0x1b, 0xb7, 0x31,
	0x83, 0xf8, 0x04, 0xda, 0x89, 0x85, 0x30, 0x76, 0x36, 0x43, 0x7e, 0xae, 0x93, 0xc8, 0x98, 0x84,
	0x24, 0x82, 0xb6, 0x3e, 0x81, 0x8f, 0x65, 0xb9, 0xa5, 0xa5, 0xcc, 0xbc, 0x88, 0x98, 0x5d, 0x74,
	0xca, 0x7b, 0x0f, 0xe7, 0x83, 0x83, 0xcf, 0xba, 0x00, 0x60, 0x1f, 0x0d, 0xf4, 0xaa, 0x96, 0x9a,
	0xf7, 0x3d, 0xd8, 0x0e, 0xea, 0x00, 0x12, 0x6c, 0x6a, 0x63, 0xcf, 0xa3, 0x66, 0x3e, 0xb8, 0xe4,
	0xc8, 0x89, 0xb0, 0x42, 0x6a, 0x6e, 0x2c, 0xfb, 0x37, 0xd8, 0x9f, 0x71, 0xfa, 0x8e, 0xf0, 0x5e,
	0x93, 0xad, 0xfb, 0x5f, 0x89, 0xec, 0xe3, 0xd2, 0xa8, 0x0a, 0x2d, 0xd1, 0x6a, 0xd6, 0x94, 0x46,
	0x11, 0x86, 0x0f, 0xa3, 0x6f, 0x9d, 0x87, 0xc0, 0x93, 0x0b, 0x2d, 0x57, 0x2a, 0x40, 0x8c, 0x55,
	0xb9, 0x44, 0xab, 0x45, 0x73, 0x10, 0xfd, 0xdd, 0x96, 0x5c, 0x6d, 0x00, 0x39, 0xc6, 0x0b, 0x27,
	0x9e, 0x40, 0xa6, 0xd6, 0xa8, 0x6a, 0x27, 0xcf, 0xec, 0x6e, 0x1e, 0x37, 0x8a, 0x1c, 0xe1, 0xb9,
	0x06, 0xd3, 0xe9, 0x54, 0xcd, 0x32, 0xd9, 0x5e, 0xd7, 0xb7, 0x9f, 0x03, 0x45, 0xeb, 0x81, 0xa2,
	0xef, 0x81, 0xa2, 0x8f, 0x91, 0x16, 0xeb, 0x91, 0x16, 0x5f, 0x23, 0x2d, 0x1e, 0x2e, 0x3a, 0x93,
	0xf4, 0x8b, 0x60, 0xd2, 0x3d, 0xd7, 0xc2, 0x8a, 0xf3, 0x5c, 0x52, 0x4f, 0xda, 0x5f, 0x27, 0xf5,
	0xe9, 0xcd, 0x43, 0x14, 0xf3, 0xdc, 0x7d, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x3a, 0x38,
	0xd8, 0x22, 0x01, 0x00, 0x00,
}

func (m *RecentSlash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecentSlash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecentSlash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintRecentSlash(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.ObjectId != 0 {
		i = encodeVarintRecentSlash(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SpOperatorAddress) > 0 {
		i -= len(m.SpOperatorAddress)
		copy(dAtA[i:], m.SpOperatorAddress)
		i = encodeVarintRecentSlash(dAtA, i, uint64(len(m.SpOperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRecentSlash(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecentSlash(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecentSlash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecentSlash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRecentSlash(uint64(m.Id))
	}
	l = len(m.SpOperatorAddress)
	if l > 0 {
		n += 1 + l + sovRecentSlash(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovRecentSlash(uint64(m.ObjectId))
	}
	if m.Height != 0 {
		n += 1 + sovRecentSlash(uint64(m.Height))
	}
	return n
}

func sovRecentSlash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecentSlash(x uint64) (n int) {
	return sovRecentSlash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecentSlash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecentSlash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecentSlash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecentSlash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecentSlash
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecentSlash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecentSlash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecentSlash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecentSlash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecentSlash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecentSlash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecentSlash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecentSlash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecentSlash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecentSlash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecentSlash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecentSlash = fmt.Errorf("proto: unexpected end of group")
)
