// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: greenfield/challenge/ongoing_challenge.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OngoingChallenge struct {
	Id                uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SpOperatorAddress string `protobuf:"bytes,2,opt,name=sp_operator_address,json=spOperatorAddress,proto3" json:"sp_operator_address,omitempty"`
	ObjectId          uint64 `protobuf:"varint,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Index             uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Height            uint64 `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	ChallengerAddress string `protobuf:"bytes,6,opt,name=challenger_address,json=challengerAddress,proto3" json:"challenger_address,omitempty"`
}

func (m *OngoingChallenge) Reset()         { *m = OngoingChallenge{} }
func (m *OngoingChallenge) String() string { return proto.CompactTextString(m) }
func (*OngoingChallenge) ProtoMessage()    {}
func (*OngoingChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dc9a194caa5d521, []int{0}
}
func (m *OngoingChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OngoingChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OngoingChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OngoingChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OngoingChallenge.Merge(m, src)
}
func (m *OngoingChallenge) XXX_Size() int {
	return m.Size()
}
func (m *OngoingChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_OngoingChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_OngoingChallenge proto.InternalMessageInfo

func (m *OngoingChallenge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OngoingChallenge) GetSpOperatorAddress() string {
	if m != nil {
		return m.SpOperatorAddress
	}
	return ""
}

func (m *OngoingChallenge) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *OngoingChallenge) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OngoingChallenge) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *OngoingChallenge) GetChallengerAddress() string {
	if m != nil {
		return m.ChallengerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*OngoingChallenge)(nil), "bnbchain.greenfield.challenge.OngoingChallenge")
}

func init() {
	proto.RegisterFile("greenfield/challenge/ongoing_challenge.proto", fileDescriptor_3dc9a194caa5d521)
}

var fileDescriptor_3dc9a194caa5d521 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4a, 0xf4, 0x30,
	0x18, 0xc6, 0x9b, 0x7e, 0x33, 0xe5, 0x9b, 0x80, 0xa2, 0x51, 0xa4, 0x20, 0x86, 0xe2, 0xaa, 0x0b,
	0xa7, 0x45, 0x3c, 0x81, 0xba, 0x12, 0x17, 0x03, 0x5d, 0xba, 0x29, 0x4d, 0xf3, 0x9a, 0x46, 0x6a,
	0x52, 0x9a, 0x08, 0xe3, 0x2d, 0x3c, 0x96, 0x0b, 0x17, 0xb3, 0x74, 0x29, 0xed, 0x45, 0x84, 0xa6,
	0xb6, 0xb3, 0x7c, 0x9f, 0x3f, 0x79, 0xc2, 0x0f, 0x5f, 0x89, 0x16, 0x40, 0x3d, 0x4b, 0xa8, 0x79,
	0x5a, 0x56, 0x45, 0x5d, 0x83, 0x12, 0x90, 0x6a, 0x25, 0xb4, 0x54, 0x22, 0x9f, 0x94, 0xa4, 0x69,
	0xb5, 0xd5, 0xe4, 0x82, 0x29, 0x56, 0x56, 0x85, 0x54, 0xc9, 0x5c, 0x4b, 0xa6, 0xd0, 0xe5, 0x17,
	0xc2, 0x47, 0x1b, 0x57, 0xbd, 0xff, 0x13, 0xc9, 0x21, 0xf6, 0x25, 0x0f, 0x51, 0x84, 0xe2, 0x45,
	0xe6, 0x4b, 0x4e, 0x12, 0x7c, 0x62, 0x9a, 0x5c, 0x37, 0xd0, 0x16, 0x56, 0xb7, 0x79, 0xc1, 0x79,
	0x0b, 0xc6, 0x84, 0x7e, 0x84, 0xe2, 0x55, 0x76, 0x6c, 0x9a, 0xcd, 0xe8, 0xdc, 0x3a, 0x83, 0x9c,
	0xe3, 0x95, 0x66, 0x2f, 0x50, 0xda, 0x5c, 0xf2, 0xf0, 0xdf, 0xf0, 0xcc, 0x7f, 0x27, 0x3c, 0x70,
	0x72, 0x8a, 0x97, 0x52, 0x71, 0xd8, 0x86, 0x8b, 0x08, 0xc5, 0x07, 0x99, 0x3b, 0xc8, 0x19, 0x0e,
	0x2a, 0x90, 0xa2, 0xb2, 0xe1, 0x72, 0xc8, 0x8f, 0x17, 0x59, 0x63, 0x32, 0x7d, 0x76, 0x5e, 0x0e,
	0xdc, 0xf2, 0xec, 0x8c, 0xcb, 0x77, 0x8f, 0x9f, 0x1d, 0x45, 0xbb, 0x8e, 0xa2, 0x9f, 0x8e, 0xa2,
	0x8f, 0x9e, 0x7a, 0xbb, 0x9e, 0x7a, 0xdf, 0x3d, 0xf5, 0x9e, 0xae, 0x85, 0xb4, 0xd5, 0x1b, 0x4b,
	0x4a, 0xfd, 0x9a, 0x32, 0xc5, 0xd6, 0x03, 0x93, 0x74, 0x0f, 0xe5, 0x76, 0x0f, 0xa6, 0x7d, 0x6f,
	0xc0, 0xb0, 0x60, 0x20, 0x78, 0xf3, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x38, 0x9a, 0xeb, 0x34, 0x71,
	0x01, 0x00, 0x00,
}

func (m *OngoingChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OngoingChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OngoingChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengerAddress) > 0 {
		i -= len(m.ChallengerAddress)
		copy(dAtA[i:], m.ChallengerAddress)
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(len(m.ChallengerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Height != 0 {
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.ObjectId != 0 {
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(m.ObjectId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SpOperatorAddress) > 0 {
		i -= len(m.SpOperatorAddress)
		copy(dAtA[i:], m.SpOperatorAddress)
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(len(m.SpOperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOngoingChallenge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOngoingChallenge(dAtA []byte, offset int, v uint64) int {
	offset -= sovOngoingChallenge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OngoingChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOngoingChallenge(uint64(m.Id))
	}
	l = len(m.SpOperatorAddress)
	if l > 0 {
		n += 1 + l + sovOngoingChallenge(uint64(l))
	}
	if m.ObjectId != 0 {
		n += 1 + sovOngoingChallenge(uint64(m.ObjectId))
	}
	if m.Index != 0 {
		n += 1 + sovOngoingChallenge(uint64(m.Index))
	}
	if m.Height != 0 {
		n += 1 + sovOngoingChallenge(uint64(m.Height))
	}
	l = len(m.ChallengerAddress)
	if l > 0 {
		n += 1 + l + sovOngoingChallenge(uint64(l))
	}
	return n
}

func sovOngoingChallenge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOngoingChallenge(x uint64) (n int) {
	return sovOngoingChallenge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OngoingChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOngoingChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OngoingChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OngoingChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOngoingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOngoingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOngoingChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOngoingChallenge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOngoingChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOngoingChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOngoingChallenge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOngoingChallenge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOngoingChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOngoingChallenge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOngoingChallenge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOngoingChallenge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOngoingChallenge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOngoingChallenge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOngoingChallenge = fmt.Errorf("proto: unexpected end of group")
)
