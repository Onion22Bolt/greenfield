syntax = "proto3";
package bnbchain.greenfield.challenge;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "greenfield/challenge/ongoing_challenge.proto";
import "greenfield/challenge/params.proto";
import "greenfield/challenge/recent_slash.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/bnb-chain/greenfield/x/challenge/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/bnb-chain/greenfield/challenge/params";
  }
  // Queries a OngoingChallenge by index.
  rpc OngoingChallenge(QueryGetOngoingChallengeRequest) returns (QueryGetOngoingChallengeResponse) {
    option (google.api.http).get = "/bnb-chain/greenfield/challenge/ongoing_challenge/{challengeId}";
  }

  // Queries a list of OngoingChallenge items.
  rpc OngoingChallengeAll(QueryAllOngoingChallengeRequest) returns (QueryAllOngoingChallengeResponse) {
    option (google.api.http).get = "/bnb-chain/greenfield/challenge/ongoing_challenge";
  }

  // Queries a RecentSlash by id.
	rpc RecentSlash(QueryGetRecentSlashRequest) returns (QueryGetRecentSlashResponse) {
		option (google.api.http).get = "/bnb-chain/greenfield/challenge/recent_slash/{id}";
	}

	// Queries a list of RecentSlash items.
	rpc RecentSlashAll(QueryAllRecentSlashRequest) returns (QueryAllRecentSlashResponse) {
		option (google.api.http).get = "/bnb-chain/greenfield/challenge/recent_slash";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetOngoingChallengeRequest {
  uint64 challengeId = 1;
}

message QueryGetOngoingChallengeResponse {
  OngoingChallenge ongoingChallenge = 1 [(gogoproto.nullable) = false];
}

message QueryAllOngoingChallengeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOngoingChallengeResponse {
  repeated OngoingChallenge ongoingChallenge = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRecentSlashRequest {
	uint64 id = 1;
}

message QueryGetRecentSlashResponse {
	RecentSlash RecentSlash = 1 [(gogoproto.nullable) = false];
}

message QueryAllRecentSlashRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRecentSlashResponse {
	repeated RecentSlash RecentSlash = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3