syntax = "proto3";
package bnbchain.greenfield.challenge;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/bnb-chain/greenfield/x/challenge/types";

// Msg defines the Msg service.
service Msg {
  rpc Submit(MsgSubmit) returns (MsgSubmitResponse);
  rpc Attest(MsgAttest) returns (MsgAttestResponse);
  // this line is used by starport scaffolding # proto/tx/rpc
}

message MsgSubmit {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string sp_operator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 object_id = 3;
  bool random_index = 4;
  uint32 index = 5;
}

message MsgSubmitResponse {}

message MsgAttest {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 challenge_id = 2;
  uint32 vote_result = 3;
  repeated fixed64 vote_validator_set = 4;
  bytes vote_agg_signature = 5;
}

message MsgAttestResponse {}

// this line is used by starport scaffolding # proto/tx/message